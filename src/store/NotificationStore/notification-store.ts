import { action, makeAutoObservable, makeObservable, observable } from "mobx";import { LoadingEnum, NotificationType } from '../types/types'import { createAlert } from '../../components/Alert'export class NotificationStore {	isLoading: LoadingEnum = LoadingEnum.initial	notification: NotificationType | undefined = undefined	switcherNotification = false	serverResponse: string | undefined = undefined	navigation: any | null = null	setIsLoading = (isLoading: LoadingEnum): void => {		this.isLoading = isLoading	}	setNavigation = (navigation:  any): void => {		this.navigation = navigation	}	setNotification = (		notification: NotificationType | undefined,		switcherNotification: boolean,		serverResponse: string | any,		loginRedirect?: () => void,		showResponse = false	): void => {		const checkResponseString = typeof serverResponse === 'string'		/*	if (!checkResponseString && serverResponse.response.data.statusCode === 401) {			return loginRedirect()		}*/		this.switcherNotification = switcherNotification		this.notification = notification		this.serverResponse = serverResponse		if (serverResponse && showResponse) {			createAlert({				title: 'Message',				message: checkResponseString ? serverResponse : serverResponse?.response?.data?.messages,				buttons: [{ text: 'Continue', style: 'cancel' }],			})		}	}	constructor() {		makeAutoObservable(this)	}}export default new NotificationStore()