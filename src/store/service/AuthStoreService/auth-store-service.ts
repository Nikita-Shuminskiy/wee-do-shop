import RootStore from "../../RootStore/root-store"import {LoadingEnum} from "../../types/types"import AsyncStorage from "@react-native-async-storage/async-storage"import {AddressType} from "../../AuthStore/auth-store"import {OptionalUserType} from "../../../api/userApi"import { RoleType, UserRegisterDataType } from "../../../api/authApi";import { routerConstants } from "../../../constants/routerConstants";export class AuthStoreService {	rootStore: typeof RootStore	constructor(rootStore: typeof RootStore) {		this.rootStore = rootStore	}	async registration(userData: UserRegisterDataType) {		try {			await this.rootStore.AuthStore.registration(userData)			await this.rootStore.AuthStoreService.login({				email: userData.email,				password: userData.password,			})			await this.rootStore.StoresStore.getStores()			await this.rootStore.CategoriesStore.getCategories()			this.rootStore.AuthStore.setLocation({} as AddressType)			return true		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			if (e.response.status === 409) {				this.rootStore.Notification.setNotification("error", true, e, redirectToLoginHandler, true)			}		}	}	async login(userData: {email: string; password: string}) {		try {			await this.rootStore.AuthStore.login({email: userData.email, password: userData.password})			const data = await this.rootStore.AuthStore.getMe()			return data?.role		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			if (e?.response.data.statusCode === 401) {				this.rootStore.Notification.setNotification(					"error",					true,					"Incorrect data has been entered",					redirectToLoginHandler,					true				)				return			}		}	}	async updateUser(idUser: string, payload: OptionalUserType): Promise<boolean | void> {		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			await this.rootStore.AuthStore.updateUser(payload)			await this.rootStore.AuthStore.getUser(idUser)			await this.rootStore.StoresStore.getStores()			await this.rootStore.CategoriesStore.getCategories()			return true		} catch (e) {			const redirectToLoginHandler = () => this.rootStore.AuthStore.setAuth(false)			this.rootStore.Notification.setNotification("error", true, e, redirectToLoginHandler, true)		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}	async getMe() {		try {			const refreshToken = await AsyncStorage.getItem("refreshToken")			if (refreshToken) {				const data = await this.rootStore.AuthStore.getMe()				if(data.role === RoleType.Customer) {					return this.rootStore.Notification.navigation.navigate(routerConstants.MAIN)				}				if(data.role === RoleType.Courier) {					return this.rootStore.Notification.navigation.navigate(routerConstants.MAIN_COURIER)				}			}			return this.rootStore.Notification.navigation.navigate(routerConstants.LOGIN)		} catch (e) {			return this.rootStore.Notification.navigation.navigate(routerConstants.LOGIN)		}	}	async logOut(): Promise<void> {		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			await this.rootStore.AuthStore.logOut()			this.rootStore.CartStore.removeCart()			this.rootStore.OrderStore.setClearOrders()			this.rootStore.StoresStore.setStores([])		} catch (e) {			console.log(e.response, "logOut")		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}	async deleteUser(): Promise<void> {		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			await this.rootStore.AuthStore.deleteUser()			this.rootStore.CartStore.removeCart()			this.rootStore.AuthStore.setClearAuthStoreData()			this.rootStore.OrderStore.setClearOrders()			this.rootStore.StoresStore.setStores([])		} catch (e) {			console.log(e.response, "deleteUser")		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}	async logOutCourier(): Promise<void> {		this.rootStore.Notification.setIsLoading(LoadingEnum.fetching)		try {			await this.rootStore.AuthStore.logOut()			this.rootStore.CourierOrderStore.setClearOrders()		} catch (e) {			console.log(e.response, "logOutCourier")		} finally {			this.rootStore.Notification.setIsLoading(LoadingEnum.success)		}	}}export default AuthStoreService